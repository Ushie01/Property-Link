{
    "extends": [
      "plugin:@typescript-eslint/recommended",
      "plugin:react/recommended",
      "plugin:import/typescript",
      "plugin:@next/next/recommended",
      "plugin:tailwindcss/recommended"
    ],
    "plugins": [
      "@typescript-eslint",
      "react-hooks",
      "immutable",
      "import",
      "@next/eslint-plugin-next",
      "disable-autofix",
      "tailwindcss"
    ],
    "env": {
      "browser": true,
      "node": true
    },
    "parserOptions": {
      "ecmaVersion": 2018,
      "sourceType": "module",
      "project": "./tsconfig.json",
      "ecmaFeatures": { "jsx": true }
    },
    "rules": {
      // Disabled rules
      "no-unused-vars": "off",
      "no-shadow": "off",
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/camelcase": "off",
      "@typescript-eslint/no-use-before-define": "off",
      "react/prop-types": "off",
      "react/react-in-jsx-scope": "off",
      "react/display-name": ["off", { "ignoreTranspilerName": false }],
  
      // General rules
      "no-var": "error",
      "no-param-reassign": "error",
      "prefer-template": "error",
      "no-duplicate-case": "error",
      "eqeqeq": "error",
      "object-shorthand": "error",
      "default-case": "error",
      "no-duplicate-imports": "error",
      "yoda": "error",
      "curly": "error",
      "no-extra-boolean-cast": "error",
      "no-useless-return": "error",
  
      // Typescript rules
      "disable-autofix/@typescript-eslint/no-unnecessary-condition": "warn",
      "@typescript-eslint/no-for-in-array": "error",
      "@typescript-eslint/no-unused-vars": [
        "error",
        { "argsIgnorePattern": "^_" }
      ],
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/consistent-type-definitions": ["error", "type"],
      "@typescript-eslint/array-type": ["error", { "default": "array" }],
      "@typescript-eslint/prefer-includes": "error",
      "@typescript-eslint/unified-signatures": "error",
      "@typescript-eslint/prefer-string-starts-ends-with": "error",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-shadow": "error",
  
      // React rules
      "react/jsx-boolean-value": ["error", "never", { "always": [] }],
      "react/self-closing-comp": "error",
      "react/no-this-in-sfc": "error",
      "react/no-array-index-key": "error",
      "react/no-unknown-property": "error",
      "react/void-dom-elements-no-children": "error",
      "react/jsx-no-undef": "error",
      "react/no-children-prop": "error",
      "react/no-multi-comp": "error",
      "react/jsx-handler-names": "error",
      "react/prefer-stateless-function": "error",
  
      // React hooks rules
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "error",
  
      // Immutability rules
      "immutable/no-mutation": "error",
  
      // Import / Export rules
      "import/default": "error",
      // "import/no-unused-modules": [1, { "unusedExports": true }],
      "import/first": "error",
      "import/exports-last": "error",
      "import/no-anonymous-default-export": "error",
      "import/order": [
        "warn",
        {
          "groups": ["builtin", "external", "internal", ["parent", "sibling"]],
          "pathGroups": [
            {
              "pattern": "react",
              "group": "external",
              "position": "before"
            },
            {
              "pattern": "~/**",
              "group": "internal",
              "position": "before"
            }
          ],
          "pathGroupsExcludedImportTypes": ["react"],
          "alphabetize": {
            "order": "asc",
            "caseInsensitive": true
          }
        }
      ]
    },
    // Tells eslint-plugin-react to automatically detect the version of React to use
    "settings": {
      "react": { "version": "detect" },
      "tailwindcss": { "callees": ["mergeClassnames"] }
    }
  }
  